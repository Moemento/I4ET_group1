// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract PlatformManager {

    // ROLES
    enum Role { None, Operator, Admin }

    // MAPPINGS
    mapping(address => Role) public roles;
    mapping(address => uint) public dailyUsage;
    mapping(address => uint) public lastUsageDay;

    // MISSION STRUCT
    struct Mission {
        address operator;
        string deviceType;
        uint timestamp;
        string missionType;
        bool success;
    }

    Mission[] public missions;

    // EVENTS
    event RoleAssigned(address indexed user, Role role);
    event MissionLogged(address indexed operator, string deviceType, string missionType, bool success);
    event UsageLimitExceeded(address indexed user, uint timestamp);

    // MODIFIERS
    modifier onlyAdmin() {
        require(roles[msg.sender] == Role.Admin, "Not admin");
        _;
    }

    modifier onlyOperator() {
        require(roles[msg.sender] == Role.Operator, "Not operator");
        _;
    }

    modifier checkUsageLimit() {
        if (block.timestamp / 1 days > lastUsageDay[msg.sender]) {
            dailyUsage[msg.sender] = 0;
            lastUsageDay[msg.sender] = block.timestamp / 1 days;
        }
        require(dailyUsage[msg.sender] < 5, "Usage limit exceeded");
        _;
        dailyUsage[msg.sender]++;
    }

    // CONSTRUCTOR
    constructor() {
        roles[msg.sender] = Role.Admin;
        emit RoleAssigned(msg.sender, Role.Admin);
    }

    // ROLE MANAGEMENT
    function assignRole(address _user, Role _role) external onlyAdmin {
        roles[_user] = _role;
        emit RoleAssigned(_user, _role);
    }

    // LOG MISSION
    function logMission(string memory _deviceType, string memory _missionType, bool _success)
        external onlyOperator checkUsageLimit {
        missions.push(Mission(msg.sender, _deviceType, block.timestamp, _missionType, _success));
        emit MissionLogged(msg.sender, _deviceType, _missionType, _success);
    }

    // GET MISSIONS
    function getMissionCount() external view returns (uint) {
        return missions.length;
    }

    function getMissions() external view returns (Mission[] memory) {
        return missions;
    }
}
